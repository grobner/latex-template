// unify-kuten-and-touten.js
//   from textlint-rule-preset-JTF-style/src/1.2.1.js
//   Copyright (c) 2015 azu
//   LICENSE : MIT
//   https://github.com/textlint-ja/textlint-rule-preset-JTF-style/blob/master/LICENSE
'use strict';

var _regx = _interopRequireDefault(require("regx"));

var _nodeUtil = require("./util/node-util");

var _regexp = require("./util/regexp");

var _matchIndex = require("match-index");

var _mergeMatches = _interopRequireDefault(require("./util/merge-matches"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["(", ")", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var rx = (0, _regx.default)('g');
/*
# unify-kuten-and-touten

- （「preset-jtf-style/1.2.1. 句点(。)と読点(、)」の改変ルール）
- 工学系の論文などを対象に、句読点を統一します。
- デフォルトは日本機械学会論文集が指定している「．」（全角ピリオド）と「，」（全角カンマ）です。
    - これらはoptionで変更できます。
- 仕様上、preset-jtf-style/1.2.1.句点(。)と読点(、)・同1.2.2・同4.1.3と矛盾する場合があります。
    - これらのルールを使用している場合は、オプションで無効化してください。

- TODO: 英語のアブストラクトのみ半角記号を使う場合など
 */

var defaultOpts = {
  kuten: '．',
  // 指定したい句点
  touten: '，',
  // 指定したい読点
  possibleMarks: {
    // 入力されうる句読点として認識させたい記号
    kuten: ['。', '.', '．'],
    touten: ['、', ',', '，']
  }
}; // [{句点 or 読点}]{日本語}

var leftTarget = mark => rx(_templateObject(), mark === '.' ? '\\.' : mark, _regexp.japaneseRegExp); // {日本語}[{句点 or 読点}]


var rightTarget = mark => rx(_templateObject2(), _regexp.japaneseRegExp, mark === '.' ? '\\.' : mark);

var reporter = function reporter(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context; // apply user options

  var opts = Object.assign({}, defaultOpts, options);
  var allKuten = [...defaultOpts.possibleMarks.kuten, ...(options.possibleMarks ? options.possibleMarks.kuten || [] : [])];
  var allTouten = [...defaultOpts.possibleMarks.touten, ...(options.possibleMarks ? options.possibleMarks.touten || [] : [])]; // generate disallowed marks' list

  var ngMarks = [...allKuten.filter(x => x !== opts.kuten), ...allTouten.filter(x => x !== opts.touten)];
  return {
    [Syntax.Str](node) {
      if (!(0, _nodeUtil.isUserWrittenNode)(node, context)) {
        return;
      }

      var text = getSource(node);
      var matches = [];

      for (var mark of ngMarks) {
        var leftMatches = (0, _matchIndex.matchCaptureGroupAll)(text, leftTarget(mark));
        var rightMatches = (0, _matchIndex.matchCaptureGroupAll)(text, rightTarget(mark));
        matches = [...matches, ...(0, _mergeMatches.default)(leftMatches, rightMatches)];
      }

      matches.forEach(match => {
        var symbol = '';
        if (allKuten.indexOf(match.text) !== -1) symbol = opts.kuten;else if (allTouten.indexOf(match.text) !== -1) symbol = opts.touten;
        var indexOfSymbol = match.index;
        report(node, new RuleError("\u53E5\u8AAD\u70B9\u306B\u306F\u300C".concat(opts.touten, "\u300D\u3068\u300C").concat(opts.kuten, "\u300D\u3092\u4F7F\u7528\u3057\u3066\u304F\u3060\u3055\u3044").concat(opts.kuten), {
          index: indexOfSymbol,
          fix: fixer.replaceTextRange([indexOfSymbol, indexOfSymbol + 1], symbol)
        }));
      });
    }

  };
};

module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=unify-kuten-and-touten.js.map