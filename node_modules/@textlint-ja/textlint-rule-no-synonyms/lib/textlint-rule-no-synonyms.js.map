{"version":3,"sources":["../src/textlint-rule-no-synonyms.ts"],"names":["TinySegmenter","require","segmenter","DefaultOptions","allows","preferWords","allowAlphabet","allowNumber","allowLexeme","report","context","options","undefined","Syntax","getSource","RuleError","fixer","usedSudachiSynonyms","Set","locationMap","Map","usedItemGroup","indexPromise","matchSegment","segment","absoluteIndex","keyItemGroupMap","itemGroups","get","forEach","itemGroup","midashAtOnce","items","item","midashi","add","set","index","ignoreNodeTypes","BlockQuote","CodeBlock","Code","Html","Link","Image","Comment","Str","node","text","segments","range","segement","length","DocumentExit","usedItems","preferWord","find","getItem","allowed","deniedItems","filter","deniedWord","message","fix","replaceTextRange","同義の見出しList","map","join","values","linter"],"mappings":"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","sourcesContent":["import { TextlintRuleReporter } from \"@textlint/types\";\nimport { createIndex, ItemGroup, Midashi } from \"./create-index\";\nimport { SudachiSynonyms } from \"sudachi-synonyms-dictionary\";\nimport { wrapReportHandler } from \"textlint-rule-helper\";\n\nconst TinySegmenter = require(\"tiny-segmenter\");\nconst segmenter = new TinySegmenter(); // インスタンス生成\n\nexport interface Options {\n    /**\n     * 許可するワードの配列\n     * ワードは完全一致で比較し、一致した場合は無視されます\n     * 例) [\"ウェブアプリ\", \"ウェブアプリケーション\"]\n     */\n    allows?: string[];\n    /**\n     * 使用を許可する見出し語の配列\n     * 定義された見出し語以外の同義語をエラーにします\n     * 例) [\"ユーザー\"] // => 「ユーザー」だけ許可し「ユーザ」などはエラーにする\n     */\n    preferWords?: string[];\n    /**\n     * 同じ語形の語の中でのアルファベットの表記揺れを許可するかどうか\n     * trueの場合はカタカナとアルファベットの表記ゆれを許可します\n     * 例) 「ブログ」と「blog」\n     * Default: true\n     */\n    allowAlphabet?: boolean;\n    /**\n     * 同じ語形の語の中での漢数字と数字の表記ゆれを許可するかどうか\n     * trueの場合は漢数字と数字の表記ゆれを許可します\n     * 例) 「1」と「一」\n     * Default: true\n     */\n    allowNumber?: boolean;\n    /**\n     * 語彙素の異なる同義語を許可するかどうか\n     * trueの場合は語彙素の異なる同義語を許可します\n     * 例) 「ルーム」と「部屋」\n     * Default: true\n     */\n    allowLexeme?: boolean;\n}\n\nexport const DefaultOptions: Required<Options> = {\n    allows: [],\n    preferWords: [],\n    allowAlphabet: true,\n    allowNumber: true,\n    allowLexeme: true\n};\n\nconst report: TextlintRuleReporter<Options> = (context, options = {}) => {\n    const allowAlphabet = options.allowAlphabet ?? DefaultOptions.allowAlphabet;\n    const allowNumber = options.allowNumber ?? DefaultOptions.allowNumber;\n    const allowLexeme = options.allowLexeme ?? DefaultOptions.allowLexeme;\n    const allows = options.allows !== undefined ? options.allows : DefaultOptions.allows;\n    const preferWords = options.preferWords !== undefined ? options.preferWords : DefaultOptions.preferWords;\n    const { Syntax, getSource, RuleError, fixer } = context;\n    const usedSudachiSynonyms: Set<SudachiSynonyms> = new Set();\n    const locationMap: Map<SudachiSynonyms, { index: number }> = new Map();\n    const usedItemGroup: Set<ItemGroup> = new Set();\n    const indexPromise = createIndex({ allowLexeme });\n    const matchSegment = (segment: string, absoluteIndex: number, keyItemGroupMap: Map<Midashi, ItemGroup[]>) => {\n        const itemGroups = keyItemGroupMap.get(segment);\n        if (!itemGroups) {\n            return;\n        }\n        itemGroups.forEach((itemGroup) => {\n            // \"アーカイブ\" など同じ見出しを複数回もつItemGroupがあるため、ItemGroupごとに1度のみに限定\n            let midashAtOnce = false;\n            itemGroup.items.forEach((item) => {\n                if (!midashAtOnce && item.midashi === segment) {\n                    midashAtOnce = true;\n                    usedSudachiSynonyms.add(item);\n                    locationMap.set(item, { index: absoluteIndex });\n                }\n                usedItemGroup.add(itemGroup);\n            });\n        });\n    };\n    return wrapReportHandler(\n        context,\n        {\n            ignoreNodeTypes: [\n                Syntax.BlockQuote,\n                Syntax.CodeBlock,\n                Syntax.Code,\n                Syntax.Html,\n                Syntax.Link,\n                Syntax.Image,\n                Syntax.Comment\n            ]\n        },\n        (report) => {\n            return {\n                async [Syntax.Str](node) {\n                    const { keyItemGroupMap } = await indexPromise;\n                    const text = getSource(node);\n                    const segments: string[] = segmenter.segment(text);\n                    let absoluteIndex = node.range[0];\n                    segments.forEach((segement) => {\n                        matchSegment(segement, absoluteIndex, keyItemGroupMap);\n                        absoluteIndex += segement.length;\n                    });\n                },\n                async [Syntax.DocumentExit](node) {\n                    await indexPromise;\n                    for (const itemGroup of usedItemGroup.values()) {\n                        const items = itemGroup.usedItems(usedSudachiSynonyms, {\n                            allows,\n                            allowAlphabet,\n                            allowNumber\n                        });\n                        const preferWord = preferWords.find((midashi) => itemGroup.getItem(midashi));\n                        const allowed = allows.find((midashi) => itemGroup.getItem(midashi));\n                        if (preferWord && !allowed) {\n                            const deniedItems = items.filter((item) => item.midashi !== preferWord);\n                            for (const item of deniedItems) {\n                                const index = locationMap.get(item)?.index ?? 0;\n                                const deniedWord = item.midashi;\n                                const message = `「${preferWord}」の同義語である「${deniedWord}」が利用されています`;\n                                report(\n                                    node,\n                                    new RuleError(message, {\n                                        index,\n                                        fix: fixer.replaceTextRange([index, index + deniedWord.length], preferWord)\n                                    })\n                                );\n                            }\n                        } else if (items.length >= 2) {\n                            const 同義の見出しList = items.map((item) => item.midashi);\n                            // select last used\n                            const matchSegment = locationMap.get(items[items.length - 1]);\n                            const index = matchSegment ? matchSegment.index : 0;\n                            const message = `同義語である「${同義の見出しList.join(\"」と「\")}」が利用されています`;\n                            report(\n                                node,\n                                new RuleError(message, {\n                                    index\n                                })\n                            );\n                        }\n                    }\n                }\n            };\n        }\n    );\n};\n\nexport default {\n    linter: report,\n    fixer: report\n};\n"],"file":"textlint-rule-no-synonyms.js"}